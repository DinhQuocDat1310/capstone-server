// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  password    String
  email       String?    @unique
  phoneNumber String?    @unique
  fullname    String?
  address     String?
  isActive    Boolean    @default(true)
  isAdmin     Boolean    @default(false)
  role        Role
  status      UserStatus @default(INIT)

  idCitizen         String? @unique
  imageCitizenFront String?
  imageCitizenBack  String?

  brand    Brand?
  driver   Driver?
  manager  Manager?
  reporter Reporter?
}

enum Role {
  ADMIN
  DRIVER
  BRAND
  MANAGER
  REPORTER
}

enum UserStatus {
  INIT
  NEW
  PENDING
  UPDATE
  BANNED
  VERIFIED
}

model Brand {
  id        String  @id @default(uuid())
  brandName String  @unique
  logo      String?

  idLicenseBusiness    String? @unique
  ownerLicenseBusiness String?
  typeBusiness         String?
  imageLicenseBusiness String?

  verify VerifyAccount[]
  user   User            @relation(fields: [userId], references: [id])
  userId String          @unique

  campaign Campaign[]
}

model Driver {
  id String @id @default(uuid())

  idCar         String? @unique
  imageCarFront String?
  imageCarBack  String?
  imageCarLeft  String?
  imageCarRight String?

  bankAccountNumber String? @unique
  bankAccountOwner  String?
  bankName          String?

  campaigns DriverJoinCampaign[]

  verify VerifyAccount[]
  user   User            @relation(fields: [userId], references: [id])
  userId String          @unique
}

model DriverJoinCampaign {
  id          String           @id @default(uuid())
  status      StatusDriverJoin @default(JOIN)
  createDate  DateTime         @default(now())
  updateDate  DateTime         @updatedAt
  description String?

  driverId               String
  driver                 Driver                   @relation(fields: [driverId], references: [id])
  campaignId             String
  campaign               Campaign                 @relation(fields: [campaignId], references: [id])
  reporterDriverCampaign ReporterDriverCampaign[]
  driverTrackingLocation DriverTrackingLocation[]
}

model DriverTrackingLocation {
  id                   String              @id @default(uuid())
  createDate           DateTime            @default(now())
  driverJoinCampaign   DriverJoinCampaign? @relation(fields: [driverJoinCampaignId], references: [id])
  driverJoinCampaignId String?
  tracking             Tracking[]
}

model Tracking {
  id                       String                  @id @default(uuid())
  totalMeterDriven         String
  timeSubmit               DateTime                @default(now())
  driverTrackingLocation   DriverTrackingLocation? @relation(fields: [driverTrackingLocationId], references: [id])
  driverTrackingLocationId String?
}

enum StatusDriverJoin {
  JOIN
  APPROVE
  CANCEL
}

model Reporter {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  reporterDriverCampaign ReporterDriverCampaign[]
}

model ReporterDriverCampaign {
  id                   String             @id @default(uuid())
  imageCarBack         String
  imageCarLeft         String
  imageCarRight        String
  imageCarOdoBefore    String?
  imageCarOdoAfter     String?
  createDate           DateTime           @default(now())
  isChecked            Boolean            @default(false)
  reporter             Reporter           @relation(fields: [reporterId], references: [id])
  reporterId           String
  driverJoinCampaign   DriverJoinCampaign @relation(fields: [driverJoinCampaignId], references: [id])
  driverJoinCampaignId String
}

model Manager {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  verify         VerifyAccount[]
  verifyCampaign VerifyCampaign[]
}

model VerifyAccount {
  id         String              @id @default(uuid())
  status     VerifyAccountStatus @default(NEW)
  detail     String?
  createDate DateTime            @default(now())
  updateAt   DateTime            @updatedAt
  assignBy   AssignBy?
  brand      Brand?              @relation(fields: [brandId], references: [id])
  brandId    String?
  driver     Driver?             @relation(fields: [driverId], references: [id])
  driverId   String?
  manager    Manager?            @relation(fields: [managerId], references: [id])
  managerId  String?
}

enum AssignBy {
  ADMIN
  SYSTEM
}

enum VerifyAccountStatus {
  NEW
  ACCEPT
  BANNED
  UPDATE
  PENDING
}

model Campaign {
  id                String         @id @default(uuid())
  campaignName      String         @unique
  startRegisterDate DateTime?
  endRegisterDate   DateTime?
  startRunningDate  DateTime
  statusCampaign    CampaignStatus @default(NEW)
  detailMessage     String?
  duration          String
  totalKm           String
  quantityDriver    String
  description       String?
  minimumKmDrive    String         @default("20")

  startWrapDate DateTime?
  endWrapDate   DateTime?
  wrapPrice     String
  poster        String

  brand   Brand?  @relation(fields: [brandId], references: [id])
  brandId String?

  locationPricePerKm String?

  locationCampaign   LocationCampaignPerKm? @relation(fields: [locationCampaignId], references: [id])
  locationCampaignId String

  wrap             Wrap?             @relation(fields: [wrapId], references: [id])
  wrapId           String?
  verifyCampaign   VerifyCampaign[]
  contractCampaign ContractCampaign?

  driverJoinCampaign DriverJoinCampaign[]
  paymentDebit       PaymentDebit[]
}

enum CampaignStatus {
  NEW
  OPEN
  PAYMENT
  WRAPPING
  RUNNING
  CLOSED
  CANCELED
}

model LocationCampaignPerKm {
  id           String     @id @default(uuid())
  createDate   DateTime   @default(now())
  updateAt     DateTime   @default(now()) @updatedAt
  locationName String
  price        String
  status       Status
  campaign     Campaign[]
}

enum Status {
  ENABLE
  DISABLE
}

model Wrap {
  id           String       @id @default(uuid())
  positionWrap PositionWrap
  price        String
  updateAt     DateTime     @updatedAt
  status       Status
  campaign     Campaign[]
}

enum PositionWrap {
  BOTH_SIDE
  LEFT_SIDE
  RIGHT_SIDE
}

model VerifyCampaign {
  id         String               @id @default(uuid())
  status     VerifyCampaignStatus @default(NEW)
  detail     String?
  createDate DateTime             @default(now())
  updateAt   DateTime             @updatedAt
  assignBy   AssignBy?
  manager    Manager?             @relation(fields: [managerId], references: [id])
  managerId  String?
  campaign   Campaign?            @relation(fields: [campaignId], references: [id])
  campaignId String?
}

enum VerifyCampaignStatus {
  NEW
  PENDING
  ACCEPT
  BANNED
  UPDATE
}

model PaymentDebit {
  id          String      @id @default(uuid())
  price       String
  type        TypePayment
  createDate  DateTime    @default(now())
  paidDate    DateTime?
  expiredDate DateTime
  campaign    Campaign?   @relation(fields: [campaignId], references: [id])
  campaignId  String
}

enum TypePayment {
  POSTPAID
  PREPAY
}

model ContractCampaign {
  id               String    @id @default(uuid())
  contractName     String
  totalDriverMoney String?
  totalSystemMoney String?
  totalWrapMoney   String?
  isAccept         Boolean
  message          String?
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  campaignId       String?   @unique
}

model FAQs {
  id       String @id @default(uuid())
  question String
  answer   String
  status   Status @default(ENABLE)
}

model Policies {
  id       String @id @default(uuid())
  question String
  answer   String
  status   Status @default(ENABLE)
}
