// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  email             String?    @unique
  password          String
  fullname          String?
  address           String?
  idCitizen         String?    @unique
  imageCitizenFront String?
  imageCitizenBack  String?
  role              Role
  status            StatusUser @default(INIT)
  isActive          Boolean    @default(true)

  brand    Brand?
  driver   Driver?
  manager  Manager?
  reporter Reporter?
  eWallet  EWallet?
}

enum Role {
  ADMIN
  DRIVER
  BRAND
  MANAGER
  REPORTER
}

enum StatusUser {
  INIT
  NEW
  PENDING
  UPDATE
  BANNED
  VERIFIED
}

model EWallet {
  id           String   @id @default(uuid())
  totalBalance Float    @default(0)
  updateDate   DateTime @db.Timestamptz

  user         User           @relation(fields: [userId], references: [id])
  userId       String         @unique
  transactions Transactions[]
}

model Transactions {
  id         String            @id @default(uuid())
  name       String
  createDate DateTime          @db.Timestamptz
  amount     Float
  status     StatusTransaction
  type       TypeTransaction

  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  eWallet   EWallet @relation(fields: [eWalletId], references: [id])
  eWalletId String
}

enum StatusTransaction {
  PENDING
  SUCCESS
  FAILED
}

enum TypeTransaction {
  DEPOSIT
  WITHDRAW
}

model Brand {
  id                   String  @id @default(uuid())
  brandName            String  @unique
  logo                 String?
  idLicenseBusiness    String? @unique
  ownerLicenseBusiness String?
  imageLicenseBusiness String?
  typeBusiness         String?

  user     User            @relation(fields: [userId], references: [id])
  userId   String          @unique
  campaign Campaign[]
  verify   VerifyAccount[]
}

model Driver {
  id            String  @id @default(uuid())
  licensePlates String? @unique
  imageCarFront String?
  imageCarBack  String?
  imageCarLeft  String?
  imageCarRight String?

  user      User                 @relation(fields: [userId], references: [id])
  userId    String               @unique
  campaigns DriverJoinCampaign[]
  verify    VerifyAccount[]
}

model DriverJoinCampaign {
  id          String           @id @default(uuid())
  status      StatusDriverJoin @default(JOIN)
  createDate  DateTime         @db.Timestamptz
  description String?

  driverId           String
  driver             Driver               @relation(fields: [driverId], references: [id])
  campaignId         String
  campaign           Campaign             @relation(fields: [campaignId], references: [id])
  drivingPhotoReport DrivingPhotoReport[]
  driverScanQRCode   DriverScanQRCode[]
}

enum StatusDriverJoin {
  JOIN
  APPROVE
  FINISH
  CANCEL
}

model DriverScanQRCode {
  id         String   @id @default(uuid())
  submitTime DateTime @db.Timestamptz

  driverJoinCampaignId String
  driverJoinCampaign   DriverJoinCampaign @relation(fields: [driverJoinCampaignId], references: [id])
  checkpointId         String
  Checkpoint           Checkpoint         @relation(fields: [checkpointId], references: [id])
}

model Reporter {
  id String @id @default(uuid())

  Checkpoint         Checkpoint?
  userId             String               @unique
  user               User                 @relation(fields: [userId], references: [id])
  drivingPhotoReport DrivingPhotoReport[]
}

model DrivingPhotoReport {
  id            String   @id @default(uuid())
  createDate    DateTime @db.Timestamptz
  imageCarBack  String
  imageCarLeft  String?
  imageCarRight String?

  reporterId           String
  reporter             Reporter           @relation(fields: [reporterId], references: [id])
  driverJoinCampaignId String
  driverJoinCampaign   DriverJoinCampaign @relation(fields: [driverJoinCampaignId], references: [id])
}

model Manager {
  id String @id @default(uuid())

  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  verify         VerifyAccount[]
  verifyCampaign VerifyCampaign[]
}

model VerifyAccount {
  id         String              @id @default(uuid())
  status     StatusVerifyAccount @default(NEW)
  detail     String?
  createDate DateTime            @db.Timestamptz

  brandId   String?
  brand     Brand?   @relation(fields: [brandId], references: [id])
  driverId  String?
  driver    Driver?  @relation(fields: [driverId], references: [id])
  managerId String?
  manager   Manager? @relation(fields: [managerId], references: [id])
}

enum StatusVerifyAccount {
  NEW
  ACCEPT
  BANNED
  UPDATE
  PENDING
}

model Campaign {
  id                String         @id @default(uuid())
  campaignName      String         @unique
  statusCampaign    StatusCampaign @default(NEW)
  startRegisterDate DateTime?      @db.Timestamptz
  endRegisterDate   DateTime?      @db.Timestamptz
  startWrapDate     DateTime?      @db.Timestamptz
  endWrapDate       DateTime?      @db.Timestamptz
  startPaymentDate  DateTime?      @db.Timestamptz
  endPaymentDate    DateTime?      @db.Timestamptz
  startRunningDate  DateTime       @db.Timestamptz
  duration          Int
  quantityDriver    Int
  wrapPrice         Float
  poster            String
  detailMessage     String?
  description       String?

  contractCampaign   ContractCampaign?
  brandId            String?
  brand              Brand?               @relation(fields: [brandId], references: [id])
  wrapId             String?
  wrap               Wrap?                @relation(fields: [wrapId], references: [id])
  routeId            String?
  route              Route?               @relation(fields: [routeId], references: [id])
  verifyCampaign     VerifyCampaign[]
  driverJoinCampaign DriverJoinCampaign[]
  transaction        Transactions[]
}

enum StatusCampaign {
  NEW
  OPEN
  PAYMENT
  WRAPPING
  RUNNING
  CLOSED
  CANCELED
}

model Wrap {
  id           String       @id @default(uuid())
  positionWrap PositionWrap
  price        Float
  isActive     Boolean      @default(true)

  campaign Campaign[]
}

enum PositionWrap {
  BOTH_SIDE
  LEFT_SIDE
  RIGHT_SIDE
}

model VerifyCampaign {
  id         String               @id @default(uuid())
  status     StatusVerifyCampaign @default(NEW)
  createDate DateTime             @db.Timestamptz
  detail     String?

  managerId  String?
  manager    Manager?  @relation(fields: [managerId], references: [id])
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
}

enum StatusVerifyCampaign {
  NEW
  PENDING
  ACCEPT
  BANNED
  UPDATE
}

model ContractCampaign {
  id               String   @id @default(uuid())
  contractName     String
  totalDriverMoney Float
  totalSystemMoney Float
  totalWrapMoney   Float
  isAccept         Boolean?
  message          String?

  campaignId String?   @unique
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
}

model FAQs {
  id       String  @id @default(uuid())
  question String
  answer   String
  isActive Boolean @default(true)
}

model PoliciesTerm {
  id       String         @id @default(uuid())
  type     TypePolicyTerm
  question String
  answer   String
  isActive Boolean        @default(true)
}

enum TypePolicyTerm {
  POLICY
  TERM
}

model Checkpoint {
  id          String @id @default(uuid())
  addressName String
  longitude   String
  latitude    String

  reporterId       String             @unique
  reporter         Reporter           @relation(fields: [reporterId], references: [id])
  driverScanQRCode DriverScanQRCode[]
  checkpointTime   CheckpointTime[]

  originMatrix      GoogleDistanceMatrix[] @relation("Origin")
  destinationMatrix GoogleDistanceMatrix[] @relation("Destination")
}

model CheckpointTime {
  id       String @id @default(uuid())
  deadline String

  routeId      String
  route        Route      @relation(fields: [routeId], references: [id])
  checkpointId String
  checkpoint   Checkpoint @relation(fields: [checkpointId], references: [id])
}

model Route {
  id             String @id @default(uuid())
  name           String
  price          Float
  totalKilometer Int

  campaign       Campaign[]
  checkpointTime CheckpointTime[]
}

model GoogleDistanceMatrix {
  id       String @id @default(uuid())
  distance Int
  time     Int

  originCheckpointId      String
  originCheckpoint        Checkpoint @relation(name: "Origin", fields: [originCheckpointId], references: [id])
  destinationCheckpointId String
  destinationCheckpoint   Checkpoint @relation(name: "Destination", fields: [destinationCheckpointId], references: [id])
}
