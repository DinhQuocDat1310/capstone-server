// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  password    String
  email       String?    @unique
  phoneNumber String?    @unique
  fullname    String?
  address     String?
  isActive    Boolean    @default(true)
  isAdmin     Boolean    @default(false)
  role        Role
  status      UserStatus @default(INIT)

  idCitizen         String? @unique
  imageCitizenFront String?
  imageCitizenBack  String?

  brand   Brand?
  driver  Driver?
  manager Manager?
}

enum Role {
  ADMIN
  DRIVER
  BRAND
  MANAGER
}

enum UserStatus {
  INIT
  NEW
  PENDING
  UPDATE
  BANNED
  VERIFIED
}

model Brand {
  id        String  @id @default(uuid())
  brandName String  @unique
  logo      String?

  idLicenseBusiness    String? @unique
  ownerLicenseBusiness String?
  typeBusiness         String?
  imageLicenseBusiness String?

  verify VerifyAccount[]
  user   User            @relation(fields: [userId], references: [id])
  userId String          @unique

  campaign Campaign[]
}

model Driver {
  id String @id @default(uuid())

  idCar         String? @unique
  imageCarFront String?
  imageCarBack  String?
  imageCarLeft  String?
  imageCarRight String?

  bankAccountNumber String? @unique
  bankAccountOwner  String?
  bankName          String?

  verify VerifyAccount[]
  user   User            @relation(fields: [userId], references: [id])
  userId String          @unique
}

model Manager {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  verify         VerifyAccount[]
  verifyCampaign VerifyCampaign[]
}

model VerifyAccount {
  id         String              @id @default(uuid())
  status     VerifyAccountStatus @default(NEW)
  detail     String?
  createDate DateTime            @default(now())
  updateAt   DateTime            @updatedAt
  assignBy   AssignBy?
  brand      Brand?              @relation(fields: [brandId], references: [id])
  brandId    String?
  driver     Driver?             @relation(fields: [driverId], references: [id])
  driverId   String?
  manager    Manager?            @relation(fields: [managerId], references: [id])
  managerId  String?
}

enum AssignBy {
  ADMIN
  SYSTEM
}

enum VerifyAccountStatus {
  NEW
  ACCEPT
  BANNED
  UPDATE
  PENDING
}

model Campaign {
  id                 String         @id @default(uuid())
  campaignName       String         @unique
  startRunningDate   DateTime
  dateOpenRegister   DateTime?
  startRegisterDate  DateTime?
  endRegisterDate    DateTime?
  datePaymentDeposit DateTime?
  statusCampaign     CampaignStatus @default(NEW)
  duration           String
  totalKm            String
  quantityDriver     String
  description        String?
  minimumKmDrive     String         @default("20")
  dateWrapSticket    DateTime?

  brand              Brand?                 @relation(fields: [brandId], references: [id])
  brandId            String?
  locationCampaign   LocationCampaignPerKm? @relation(fields: [locationCampaignId], references: [id])
  locationCampaignId String                 @unique
  wrap               Warp?                  @relation(fields: [warpId], references: [id])
  warpId             String?                @unique
  verifyCampaign     VerifyCampaign[]
  contractCampaign   ContractCampaign?
}

enum CampaignStatus {
  NEW
  OPEN
  PAYMENT
  WARPPING
  RUNNING
  CLOSED
  CANCELED
}

model LocationCampaignPerKm {
  id           String     @id @default(uuid())
  locationName String
  price        String
  campaign     Campaign[]
}

model Warp {
  id           String       @id @default(uuid())
  imagePoster  String
  positionWarp PositionWarp
  price        String
  campaign     Campaign?
}

enum PositionWarp {
  BOTH_SIDE
  ONE_SIDE
}

model VerifyCampaign {
  id         String               @id @default(uuid())
  status     VerifyCampaignStatus @default(NEW)
  detail     String?
  createDate DateTime             @default(now())
  updateAt   DateTime             @updatedAt
  assignBy   AssignBy?
  manager    Manager?             @relation(fields: [managerId], references: [id])
  managerId  String?
  campaign   Campaign?            @relation(fields: [campaignId], references: [id])
  campaignId String?
}

enum VerifyCampaignStatus {
  NEW
  PENDING
  ACCEPT
  BANNED
  UPDATE
}

model ContractCampaign {
  id               String    @id @default(uuid())
  contractName     String
  totalDriverMoney String?
  totalSystemMoney String?
  totalWarpType    String?
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  campaignId       String?   @unique
}
